// <auto-generated />
using System;
using JobYub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JobYub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190429105156_changelenghtofDate")]
    partial class changelenghtofDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JobYub.Models.Advertisement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("Age");

                    b.Property<string>("ApplicationUserID")
                        .HasMaxLength(40);

                    b.Property<int>("CityID");

                    b.Property<int?>("CollaborationType");

                    b.Property<string>("Date")
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("EndDate");

                    b.Property<int?>("Experience");

                    b.Property<int>("Gender");

                    b.Property<bool?>("Graduated");

                    b.Property<int?>("JobCategoryID");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MaxAge");

                    b.Property<int?>("MaxSalary");

                    b.Property<int?>("MinAge");

                    b.Property<int?>("MinSalary");

                    b.Property<int?>("PaymentID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11);

                    b.Property<int>("RegionID");

                    b.Property<int?>("ReportNum");

                    b.Property<string>("ReportsDesc");

                    b.Property<string>("SalaryType");

                    b.Property<long>("StartDate");

                    b.Property<int?>("TagID");

                    b.Property<string>("TagIDs");

                    b.Property<int>("TarrifID");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int>("advertisementType");

                    b.Property<int>("status");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("CityID");

                    b.HasIndex("JobCategoryID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("RegionID");

                    b.HasIndex("TagID");

                    b.HasIndex("TarrifID");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementCompanyType", b =>
                {
                    b.Property<int>("AdvertisementID");

                    b.Property<int>("CompanyTypeID");

                    b.HasKey("AdvertisementID", "CompanyTypeID");

                    b.HasIndex("CompanyTypeID");

                    b.ToTable("AdvertisementCompanyTypes");
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementEducationLevel", b =>
                {
                    b.Property<int>("AdvertisementID");

                    b.Property<int>("EducationLevelID");

                    b.HasKey("AdvertisementID", "EducationLevelID");

                    b.HasIndex("EducationLevelID");

                    b.ToTable("AdvertisementEducationLevels");
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementMajor", b =>
                {
                    b.Property<int>("AdvertisementID");

                    b.Property<int>("MajorID");

                    b.HasKey("AdvertisementID", "MajorID");

                    b.HasIndex("MajorID");

                    b.ToTable("AdvertisementMajors");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("BirthDate");

                    b.Property<int?>("CityID");

                    b.Property<string>("Company");

                    b.Property<int?>("CompanyTypeID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("EducationLevelID");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("Experience");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<bool>("Graduated");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("LastName");

                    b.Property<double?>("Latitude");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<double?>("Longtitude");

                    b.Property<int?>("MajorID");

                    b.Property<int?>("MilitaryStatus");

                    b.Property<string>("Mobile");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("RawTextResume");

                    b.Property<int?>("RegionID");

                    b.Property<byte[]>("Resume");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Token");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("VerificationCode");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.HasIndex("CompanyTypeID");

                    b.HasIndex("EducationLevelID");

                    b.HasIndex("MajorID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JobYub.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("ProvinceID");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("JobYub.Models.CompanyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("CompanyType");
                });

            modelBuilder.Entity("JobYub.Models.EducationLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("EducationLevel");
                });

            modelBuilder.Entity("JobYub.Models.JobCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentCategoryID");

                    b.Property<int>("ParentID");

                    b.HasKey("ID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("JobYub.Models.Major", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("ParentID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Major");
                });

            modelBuilder.Entity("JobYub.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Date");

                    b.Property<string>("TrackingNumber");

                    b.HasKey("ID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("JobYub.Models.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("JobYub.Models.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("JobYub.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("JobYub.Models.Tarrif", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Days");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Price");

                    b.Property<int>("PriorityID");

                    b.HasKey("ID");

                    b.ToTable("Tarrif");
                });

            modelBuilder.Entity("JobYub.Models.Advertisement", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Advertisements")
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("JobYub.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("JobCategoryID");

                    b.HasOne("JobYub.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");

                    b.HasOne("JobYub.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.Tag")
                        .WithMany("Advertisements")
                        .HasForeignKey("TagID");

                    b.HasOne("JobYub.Models.Tarrif", "Tarrif")
                        .WithMany()
                        .HasForeignKey("TarrifID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementCompanyType", b =>
                {
                    b.HasOne("JobYub.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementCompanyTypes")
                        .HasForeignKey("AdvertisementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.CompanyType", "CompanyType")
                        .WithMany("AdvertisementCompanyTypes")
                        .HasForeignKey("CompanyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementEducationLevel", b =>
                {
                    b.HasOne("JobYub.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementEducationLevels")
                        .HasForeignKey("AdvertisementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.EducationLevel", "EducationLevel")
                        .WithMany("AdvertisementEducationLevels")
                        .HasForeignKey("EducationLevelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.AdvertisementMajor", b =>
                {
                    b.HasOne("JobYub.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementMajors")
                        .HasForeignKey("AdvertisementID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.Major", "Major")
                        .WithMany("AdvertisementMajors")
                        .HasForeignKey("MajorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUser", b =>
                {
                    b.HasOne("JobYub.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityID");

                    b.HasOne("JobYub.Models.CompanyType", "CompanyType")
                        .WithMany("Users")
                        .HasForeignKey("CompanyTypeID");

                    b.HasOne("JobYub.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelID");

                    b.HasOne("JobYub.Models.Major", "Major")
                        .WithMany("Users")
                        .HasForeignKey("MajorID");

                    b.HasOne("JobYub.Models.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionID");
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("JobYub.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("JobYub.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.City", b =>
                {
                    b.HasOne("JobYub.Models.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.JobCategory", b =>
                {
                    b.HasOne("JobYub.Models.JobCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryID");
                });

            modelBuilder.Entity("JobYub.Models.Major", b =>
                {
                    b.HasOne("JobYub.Models.Major", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("JobYub.Models.Region", b =>
                {
                    b.HasOne("JobYub.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
